type: edu
files:
- name: regex/regex.py
  visible: true
  text: |
    # -*- coding: utf-8 -*-
    """
    Created on Thu Aug 27 23:45:05 2020

    @author: ptole
    """

    # write your code here
    """
    JetBrains Python Regex

    An empty regex should always return True.
    An empty input should always return False.
    An empty regex against an empty input always returns True.
    """
    [regular_expression, input_text] = input().split('|')
    regular_expression = regular_expression.strip()
    input_text = input_text.strip()


    def check_char(reg_char, char):
        if not reg_char and not char:
            # print(100)
            return True
        elif not char:
            # print(101)
            return False
        elif reg_char == '.':
            # print(102)
            return True
        elif reg_char == char:
            # print(103)
            return True
        elif not reg_char:
            # print(104)
            return True
        else:
            # print(105)
            return False


    def check_equal_word(regex, cmp_word):
        result = False
        if not regex:
            # print(10)
            return True
        if not cmp_word:
            # print(11)
            return False
        if len(regex) > len(cmp_word):
            # print(12)
            return False
        c = 0
        if check_char(regex[0], cmp_word[0]):
            # print(13)
            result = True
            for _ in cmp_word[1:]:
                c += 1
                # print(14)
                letter_check = check_char(regex[c], cmp_word[c])
                if not letter_check:
                    # print(15)
                    result = letter_check
                    break
        # print(16)
        return result


    def check_any_text(expr, text):
        result = False
        len_expr = len(expr)
        len_text = len(text)

        if len_expr > len_text:
            # print(1)
            return result

        if not expr:
            # print(2)
            return not result

        if not text:
            # print(3)
            return result

        if len(expr) == len(text):
            # print(4)
            return check_equal_word(expr, text)

        depth = (len_text - len_expr + 1)
        # print(f'text length {len_text} expr length {len_expr} depth {depth}')
        for offset in range(0, len_text - len_expr + 1):
            partial_text = text[offset:offset + len_expr]
            # print('partial text', partial_text, 'expr',expr)
            if len(partial_text) == len_expr:
                # print(f'offset {offset} is fine')
                result = (result or check_equal_word(expr, partial_text))
                if result:
                    # print(5)
                    break
            else:
                break
        # print(6)
        return result


    print(check_any_text(regular_expression, input_text))
  learner_created: false
- name: tests.py
  visible: false
  text: |
    # coding: utf-8
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase, SimpleTestCase


    class RegexTest(StageTest):
        m_cases = [
            # stage 1
            ("a", "a",          "True",     "Two identical patterns should return True!"),
            ("a", "b",          "False",    "Two different patterns should not return True!"),
            ("7", "7",          "True",     "Two identical patterns should return True!"),
            ("6", "7",          "False",    "Two different patterns should not return True!"),
            (".", "a",          "True",     "Don't forget that '.' is a wild-card that matches any single character."),
            ("a", ".",          "False",    "A period in the input string is still a literal!"),
            ("", "a",           "True",     "An empty regex always returns True!"),
            ("", "",            "True",     "An empty regex always returns True!"),
            ("a", "",           "False",    "A non-empty regex and an empty input string always returns False!"),
            # stage 2
            ("apple", "apple",  "True",     "Two identical equal-length patterns should return True!"),
            (".pple", "apple",  "True",     "The wild-card '.' should match any single character in a string."),
            ("appl.", "apple",  "True",     "The wild-card '.' should match any single character in a string."),
            (".....", "apple",  "True",     "The wild-card '.' should match any single character in a string."),
            ("", "apple",       "True",     "An empty regex always returns True!"),
            ("apple", "",       "False",    "A non-empty regex and an empty input string always returns False!"),
            ("apple", "peach",  "False",    "Two different patterns should not return True!"),
            # stage 3
            ("le", "apple",     "True",     "If the input string contains the regex, it should return True!"),
            ("app", "apple",    "True",     "If the input string contains the regex, it should return True!"),
            ("a", "apple",      "True",     "If the input string contains the regex, it should return True!"),
            (".", "apple",      "True",     "Even a single wild-card character '.' can produce a match!"),
            ("apwle", "apple",  "False",    "Two different patterns should not return True!"),
            ("peach", "apple",  "False",    "Two different patterns should not return True!"),
            # stage 4
            ('^app', 'apple',           "True",
                "A regex starting with '^' should match the following pattern only at the beginning of the input string!"),
            ('le$', 'apple',            "True",
                "A regex ending with '$' should match the preceding pattern only at the end of the input string!"),
            ('^a', 'apple',             "True",
                "A regex starting with '^' should match the following pattern only at the beginning of the input string!"),
            ('.$', 'apple',             "True",
                "A regex ending with '$' should match the preceding pattern only at the end of the input string!"),
            ('apple$', 'tasty apple',   "True",
                "A regex ending with '$' should match the preceding pattern only at the end of the input string!"),
            ('^apple', 'apple pie',     "True",
                "A regex starting with '^' should match the following pattern only at the beginning of the input string!"),
            ('^apple$', 'apple',        "True",
                "A regex starting with '^' and ending with '$' should match only the enclosed literals!"),
            ('^apple$', 'tasty apple',  "False",
                "A regex starting with '^' and ending with '$' should match only the enclosed literals!"),
            ('^apple$', 'apple pie',    "False",
                "A regex starting with '^' and ending with '$' should match only the enclosed literals!"),
            ('app$', 'apple',           "False",
                "A regex ending with '$' should match the preceding pattern only at the end of the input string!"),
            ('^le', 'apple',            "False",
                "A regex starting with '^' should match the following pattern only at the beginning of the input string!"),
            # stage 5
            ("colou?r", "color",        "True",
                "'?' in a regex should match the preceding character exactly 0 or 1 times!"),
            ("colou?r", "colour",       "True",
                "'?' in a regex should match the preceding character exactly 0 or 1 times!"),
            ("colou?r", "colouur",      "False",
                "'?' in a regex should match the preceding character exactly 0 or 1 times!"),
            ("colou*r", "color",        "True",
                "'*' in a regex should match the preceding character 0 or more times!"),
            ("colou*r", "colour",       "True",
                "'*' in a regex should match the preceding character 0 or more times!"),
            ("colou*r", "colouur",      "True",
                "'*' in a regex should match the preceding character 0 or more times!"),
            ("colou+r", "colour",        "True",
                 "'+' in a regex should match the preceding character 1 or more times!"),
            ("colou+r", "color",        "False",
                "'+' in a regex should match the preceding character 1 or more times!"),
            (".*", "aaa",               "True",
                "The repetition operators can be combined with the wild card '.'!"),
            (".+", "aaa",               "True",
                "The repetition operators can be combined with the wild card '.'!"),
            (".?", "aaa",               "True",
                "The repetition operators can be combined with the wild card '.'!"),
            ("no+$", "noooooooope",     "False",
                "The repetition operators can be combined with other metacharacters, like '.', '^' and '$'."),
            ("^no+", "noooooooope",     "True",
                "The repetition operators can be combined with other metacharacters, like '.', '^' and '$'."),
            ("^no+pe$", "noooooooope",     "True",
                "The repetition operators can be combined with other metacharacters, like '.', '^' and '$'."),
            ("^n.+pe$", "noooooooope",     "True",
                "The repetition operators can be combined with other metacharacters, like '.', '^' and '$'."),
            ("^n.+p$", "noooooooope",     "False",
                "The repetition operators can be combined with other metacharacters, like '.', '^' and '$'.")
        ]


        def generate(self):
            return [
                SimpleTestCase(
                    stdin="{0}|{1}".format(regex, text),
                    stdout=output,
                    feedback=fb
                ) for regex, text, output, fb in self.m_cases
            ]


    if __name__ == '__main__':
        RegexTest('regex.regex').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/114/stages/623/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/114/stages/623/implement">JetBrains
    Academy</a>
  time: Mon, 14 Sep 2020 17:43:50 UTC
record: -1
